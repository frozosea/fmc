// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: freight.proto

package ___

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FreightParserClient is the client API for FreightParser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FreightParserClient interface {
	GetFreight(ctx context.Context, in *FreightRequest, opts ...grpc.CallOption) (*FreightResponseList, error)
}

type freightParserClient struct {
	cc grpc.ClientConnInterface
}

func NewFreightParserClient(cc grpc.ClientConnInterface) FreightParserClient {
	return &freightParserClient{cc}
}

func (c *freightParserClient) GetFreight(ctx context.Context, in *FreightRequest, opts ...grpc.CallOption) (*FreightResponseList, error) {
	out := new(FreightResponseList)
	err := c.cc.Invoke(ctx, "/proto_freight.FreightParser/get_freight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FreightParserServer is the server API for FreightParser service.
// All implementations must embed UnimplementedFreightParserServer
// for forward compatibility
type FreightParserServer interface {
	GetFreight(context.Context, *FreightRequest) (*FreightResponseList, error)
	mustEmbedUnimplementedFreightParserServer()
}

// UnimplementedFreightParserServer must be embedded to have forward compatible implementations.
type UnimplementedFreightParserServer struct {
}

func (UnimplementedFreightParserServer) GetFreight(context.Context, *FreightRequest) (*FreightResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFreightParserServer) mustEmbedUnimplementedFreightParserServer() {}

// UnsafeFreightParserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FreightParserServer will
// result in compilation errors.
type UnsafeFreightParserServer interface {
	mustEmbedUnimplementedFreightParserServer()
}

func RegisterFreightParserServer(s grpc.ServiceRegistrar, srv FreightParserServer) {
	s.RegisterService(&FreightParser_ServiceDesc, srv)
}

func _FreightParser_GetFreight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreightParserServer).GetFreight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_freight.FreightParser/get_freight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreightParserServer).GetFreight(ctx, req.(*FreightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FreightParser_ServiceDesc is the grpc.ServiceDesc for FreightParser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FreightParser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto_freight.FreightParser",
	HandlerType: (*FreightParserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_freight",
			Handler:    _FreightParser_GetFreight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "freight.proto",
}
