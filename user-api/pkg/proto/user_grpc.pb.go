// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: user.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	//yes
	AddContainerToAccount(ctx context.Context, in *AddContainerToAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//no
	AddBillNumberToAccount(ctx context.Context, in *AddContainerToAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//yes
	DeleteContainersFromAccount(ctx context.Context, in *DeleteContainersFromAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//no
	DeleteBillNumbersFromAccount(ctx context.Context, in *DeleteContainersFromAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//yes
	GetAll(ctx context.Context, in *GetAllContainersFromAccountRequest, opts ...grpc.CallOption) (*GetAllContainersResponse, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) AddContainerToAccount(ctx context.Context, in *AddContainerToAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.User/AddContainerToAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddBillNumberToAccount(ctx context.Context, in *AddContainerToAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.User/AddBillNumberToAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteContainersFromAccount(ctx context.Context, in *DeleteContainersFromAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.User/DeleteContainersFromAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteBillNumbersFromAccount(ctx context.Context, in *DeleteContainersFromAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.User/DeleteBillNumbersFromAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAll(ctx context.Context, in *GetAllContainersFromAccountRequest, opts ...grpc.CallOption) (*GetAllContainersResponse, error) {
	out := new(GetAllContainersResponse)
	err := c.cc.Invoke(ctx, "/user.User/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	//yes
	AddContainerToAccount(context.Context, *AddContainerToAccountRequest) (*emptypb.Empty, error)
	//no
	AddBillNumberToAccount(context.Context, *AddContainerToAccountRequest) (*emptypb.Empty, error)
	//yes
	DeleteContainersFromAccount(context.Context, *DeleteContainersFromAccountRequest) (*emptypb.Empty, error)
	//no
	DeleteBillNumbersFromAccount(context.Context, *DeleteContainersFromAccountRequest) (*emptypb.Empty, error)
	//yes
	GetAll(context.Context, *GetAllContainersFromAccountRequest) (*GetAllContainersResponse, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) AddContainerToAccount(context.Context, *AddContainerToAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContainerToAccount not implemented")
}
func (UnimplementedUserServer) AddBillNumberToAccount(context.Context, *AddContainerToAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBillNumberToAccount not implemented")
}
func (UnimplementedUserServer) DeleteContainersFromAccount(context.Context, *DeleteContainersFromAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContainersFromAccount not implemented")
}
func (UnimplementedUserServer) DeleteBillNumbersFromAccount(context.Context, *DeleteContainersFromAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBillNumbersFromAccount not implemented")
}
func (UnimplementedUserServer) GetAll(context.Context, *GetAllContainersFromAccountRequest) (*GetAllContainersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_AddContainerToAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContainerToAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddContainerToAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/AddContainerToAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddContainerToAccount(ctx, req.(*AddContainerToAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddBillNumberToAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContainerToAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddBillNumberToAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/AddBillNumberToAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddBillNumberToAccount(ctx, req.(*AddContainerToAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteContainersFromAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContainersFromAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteContainersFromAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/DeleteContainersFromAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteContainersFromAccount(ctx, req.(*DeleteContainersFromAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteBillNumbersFromAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContainersFromAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteBillNumbersFromAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/DeleteBillNumbersFromAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteBillNumbersFromAccount(ctx, req.(*DeleteContainersFromAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllContainersFromAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetAll(ctx, req.(*GetAllContainersFromAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddContainerToAccount",
			Handler:    _User_AddContainerToAccount_Handler,
		},
		{
			MethodName: "AddBillNumberToAccount",
			Handler:    _User_AddBillNumberToAccount_Handler,
		},
		{
			MethodName: "DeleteContainersFromAccount",
			Handler:    _User_DeleteContainersFromAccount_Handler,
		},
		{
			MethodName: "DeleteBillNumbersFromAccount",
			Handler:    _User_DeleteBillNumbersFromAccount_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _User_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// ScheduleTrackingClient is the client API for ScheduleTracking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduleTrackingClient interface {
	//yes
	AddContainersOnTrack(ctx context.Context, in *AddOnTrackRequest, opts ...grpc.CallOption) (*AddOnTrackResponse, error)
	//yes
	AddBillNosOnTrack(ctx context.Context, in *AddOnTrackRequest, opts ...grpc.CallOption) (*AddOnTrackResponse, error)
	//yes
	UpdateTrackingTime(ctx context.Context, in *UpdateTrackingTimeRequest, opts ...grpc.CallOption) (*RepeatedBaseAddOnTrackResponse, error)
	//yes
	AddEmailsOnTracking(ctx context.Context, in *AddEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//yes
	DeleteEmailFromTrack(ctx context.Context, in *DeleteEmailFromTrackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//yes
	DeleteContainersFromTrack(ctx context.Context, in *DeleteFromTrackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//yes
	DeleteBillNosFromTrack(ctx context.Context, in *DeleteFromTrackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//yes
	GetInfoAboutTrack(ctx context.Context, in *GetInfoAboutTrackRequest, opts ...grpc.CallOption) (*GetInfoAboutTrackResponse, error)
}

type scheduleTrackingClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduleTrackingClient(cc grpc.ClientConnInterface) ScheduleTrackingClient {
	return &scheduleTrackingClient{cc}
}

func (c *scheduleTrackingClient) AddContainersOnTrack(ctx context.Context, in *AddOnTrackRequest, opts ...grpc.CallOption) (*AddOnTrackResponse, error) {
	out := new(AddOnTrackResponse)
	err := c.cc.Invoke(ctx, "/user.ScheduleTracking/AddContainersOnTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleTrackingClient) AddBillNosOnTrack(ctx context.Context, in *AddOnTrackRequest, opts ...grpc.CallOption) (*AddOnTrackResponse, error) {
	out := new(AddOnTrackResponse)
	err := c.cc.Invoke(ctx, "/user.ScheduleTracking/AddBillNosOnTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleTrackingClient) UpdateTrackingTime(ctx context.Context, in *UpdateTrackingTimeRequest, opts ...grpc.CallOption) (*RepeatedBaseAddOnTrackResponse, error) {
	out := new(RepeatedBaseAddOnTrackResponse)
	err := c.cc.Invoke(ctx, "/user.ScheduleTracking/UpdateTrackingTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleTrackingClient) AddEmailsOnTracking(ctx context.Context, in *AddEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.ScheduleTracking/AddEmailsOnTracking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleTrackingClient) DeleteEmailFromTrack(ctx context.Context, in *DeleteEmailFromTrackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.ScheduleTracking/DeleteEmailFromTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleTrackingClient) DeleteContainersFromTrack(ctx context.Context, in *DeleteFromTrackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.ScheduleTracking/DeleteContainersFromTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleTrackingClient) DeleteBillNosFromTrack(ctx context.Context, in *DeleteFromTrackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.ScheduleTracking/DeleteBillNosFromTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleTrackingClient) GetInfoAboutTrack(ctx context.Context, in *GetInfoAboutTrackRequest, opts ...grpc.CallOption) (*GetInfoAboutTrackResponse, error) {
	out := new(GetInfoAboutTrackResponse)
	err := c.cc.Invoke(ctx, "/user.ScheduleTracking/GetInfoAboutTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduleTrackingServer is the server API for ScheduleTracking service.
// All implementations must embed UnimplementedScheduleTrackingServer
// for forward compatibility
type ScheduleTrackingServer interface {
	//yes
	AddContainersOnTrack(context.Context, *AddOnTrackRequest) (*AddOnTrackResponse, error)
	//yes
	AddBillNosOnTrack(context.Context, *AddOnTrackRequest) (*AddOnTrackResponse, error)
	//yes
	UpdateTrackingTime(context.Context, *UpdateTrackingTimeRequest) (*RepeatedBaseAddOnTrackResponse, error)
	//yes
	AddEmailsOnTracking(context.Context, *AddEmailRequest) (*emptypb.Empty, error)
	//yes
	DeleteEmailFromTrack(context.Context, *DeleteEmailFromTrackRequest) (*emptypb.Empty, error)
	//yes
	DeleteContainersFromTrack(context.Context, *DeleteFromTrackRequest) (*emptypb.Empty, error)
	//yes
	DeleteBillNosFromTrack(context.Context, *DeleteFromTrackRequest) (*emptypb.Empty, error)
	//yes
	GetInfoAboutTrack(context.Context, *GetInfoAboutTrackRequest) (*GetInfoAboutTrackResponse, error)
	mustEmbedUnimplementedScheduleTrackingServer()
}

// UnimplementedScheduleTrackingServer must be embedded to have forward compatible implementations.
type UnimplementedScheduleTrackingServer struct {
}

func (UnimplementedScheduleTrackingServer) AddContainersOnTrack(context.Context, *AddOnTrackRequest) (*AddOnTrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContainersOnTrack not implemented")
}
func (UnimplementedScheduleTrackingServer) AddBillNosOnTrack(context.Context, *AddOnTrackRequest) (*AddOnTrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBillNosOnTrack not implemented")
}
func (UnimplementedScheduleTrackingServer) UpdateTrackingTime(context.Context, *UpdateTrackingTimeRequest) (*RepeatedBaseAddOnTrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrackingTime not implemented")
}
func (UnimplementedScheduleTrackingServer) AddEmailsOnTracking(context.Context, *AddEmailRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEmailsOnTracking not implemented")
}
func (UnimplementedScheduleTrackingServer) DeleteEmailFromTrack(context.Context, *DeleteEmailFromTrackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmailFromTrack not implemented")
}
func (UnimplementedScheduleTrackingServer) DeleteContainersFromTrack(context.Context, *DeleteFromTrackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContainersFromTrack not implemented")
}
func (UnimplementedScheduleTrackingServer) DeleteBillNosFromTrack(context.Context, *DeleteFromTrackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBillNosFromTrack not implemented")
}
func (UnimplementedScheduleTrackingServer) GetInfoAboutTrack(context.Context, *GetInfoAboutTrackRequest) (*GetInfoAboutTrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoAboutTrack not implemented")
}
func (UnimplementedScheduleTrackingServer) mustEmbedUnimplementedScheduleTrackingServer() {}

// UnsafeScheduleTrackingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduleTrackingServer will
// result in compilation errors.
type UnsafeScheduleTrackingServer interface {
	mustEmbedUnimplementedScheduleTrackingServer()
}

func RegisterScheduleTrackingServer(s grpc.ServiceRegistrar, srv ScheduleTrackingServer) {
	s.RegisterService(&ScheduleTracking_ServiceDesc, srv)
}

func _ScheduleTracking_AddContainersOnTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOnTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleTrackingServer).AddContainersOnTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ScheduleTracking/AddContainersOnTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleTrackingServer).AddContainersOnTrack(ctx, req.(*AddOnTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleTracking_AddBillNosOnTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOnTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleTrackingServer).AddBillNosOnTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ScheduleTracking/AddBillNosOnTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleTrackingServer).AddBillNosOnTrack(ctx, req.(*AddOnTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleTracking_UpdateTrackingTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrackingTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleTrackingServer).UpdateTrackingTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ScheduleTracking/UpdateTrackingTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleTrackingServer).UpdateTrackingTime(ctx, req.(*UpdateTrackingTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleTracking_AddEmailsOnTracking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleTrackingServer).AddEmailsOnTracking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ScheduleTracking/AddEmailsOnTracking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleTrackingServer).AddEmailsOnTracking(ctx, req.(*AddEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleTracking_DeleteEmailFromTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmailFromTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleTrackingServer).DeleteEmailFromTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ScheduleTracking/DeleteEmailFromTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleTrackingServer).DeleteEmailFromTrack(ctx, req.(*DeleteEmailFromTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleTracking_DeleteContainersFromTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFromTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleTrackingServer).DeleteContainersFromTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ScheduleTracking/DeleteContainersFromTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleTrackingServer).DeleteContainersFromTrack(ctx, req.(*DeleteFromTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleTracking_DeleteBillNosFromTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFromTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleTrackingServer).DeleteBillNosFromTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ScheduleTracking/DeleteBillNosFromTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleTrackingServer).DeleteBillNosFromTrack(ctx, req.(*DeleteFromTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleTracking_GetInfoAboutTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoAboutTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleTrackingServer).GetInfoAboutTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ScheduleTracking/GetInfoAboutTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleTrackingServer).GetInfoAboutTrack(ctx, req.(*GetInfoAboutTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScheduleTracking_ServiceDesc is the grpc.ServiceDesc for ScheduleTracking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScheduleTracking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.ScheduleTracking",
	HandlerType: (*ScheduleTrackingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddContainersOnTrack",
			Handler:    _ScheduleTracking_AddContainersOnTrack_Handler,
		},
		{
			MethodName: "AddBillNosOnTrack",
			Handler:    _ScheduleTracking_AddBillNosOnTrack_Handler,
		},
		{
			MethodName: "UpdateTrackingTime",
			Handler:    _ScheduleTracking_UpdateTrackingTime_Handler,
		},
		{
			MethodName: "AddEmailsOnTracking",
			Handler:    _ScheduleTracking_AddEmailsOnTracking_Handler,
		},
		{
			MethodName: "DeleteEmailFromTrack",
			Handler:    _ScheduleTracking_DeleteEmailFromTrack_Handler,
		},
		{
			MethodName: "DeleteContainersFromTrack",
			Handler:    _ScheduleTracking_DeleteContainersFromTrack_Handler,
		},
		{
			MethodName: "DeleteBillNosFromTrack",
			Handler:    _ScheduleTracking_DeleteBillNosFromTrack_Handler,
		},
		{
			MethodName: "GetInfoAboutTrack",
			Handler:    _ScheduleTracking_GetInfoAboutTrack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	//Yes
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//Yes
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	//Yes
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	//Yes
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.Auth/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/user.Auth/LoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/user.Auth/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/user.Auth/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	//Yes
	RegisterUser(context.Context, *RegisterUserRequest) (*emptypb.Empty, error)
	//Yes
	LoginUser(context.Context, *LoginUserRequest) (*LoginResponse, error)
	//Yes
	RefreshToken(context.Context, *RefreshTokenRequest) (*LoginResponse, error)
	//Yes
	Auth(context.Context, *AuthRequest) (*AuthResponse, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) RegisterUser(context.Context, *RegisterUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedAuthServer) LoginUser(context.Context, *LoginUserRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedAuthServer) RefreshToken(context.Context, *RefreshTokenRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAuthServer) Auth(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Auth/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Auth/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Auth/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Auth/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _Auth_RegisterUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _Auth_LoginUser_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Auth_RefreshToken_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _Auth_Auth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
